steps:

  # Fetch the Cloud SQL proxy key from GCS
  - name: "gcr.io/cloud-builders/gsutil"
    id: "fetch-key"
    args:
      [
        "cp",
        "gs://wordpress-sigma-436504-wordpress-content/key.json",
        "key.json",
      ]

  # Deploy WordPress PVC
  - name: "gcr.io/cloud-builders/kubectl"
    args: ["apply", "-f", "k8s/wordpress-volumeclaim.yaml"]
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"

  # Create/Update CloudSQL credentials secret
  - name: "gcr.io/cloud-builders/kubectl"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -e
        echo "Fetching cluster credentials..."
        gcloud container clusters get-credentials wordpress-cluster --zone us-central1-a --project ${PROJECT_ID}
        echo "Creating/updating cloudsql-db-credentials secret..."
        kubectl create secret generic cloudsql-db-credentials \
          --from-literal=username=wordpress \
          --from-literal=password=$$_DB_PASSWORD \
          --dry-run=client -o yaml | kubectl apply -f -
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"
    secretEnv: ["_DB_PASSWORD"]


  # Create CloudSQL instance credentials secret
  - name: "gcr.io/cloud-builders/kubectl"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set -e
        echo "Creating/updating cloudsql-instance-credentials secret..."
        kubectl create secret generic cloudsql-instance-credentials \
          --from-file=key.json=key.json \
          --dry-run=client -o yaml | kubectl apply -f -
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"

  # Deploy WordPress deployment
  - name: "gcr.io/cloud-builders/kubectl"
    args: ["apply", "-f", "k8s/wordpress-deployment.yaml"]
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"

  # Deploy WordPress service
  - name: "gcr.io/cloud-builders/kubectl"
    args: ["apply", "-f", "k8s/wordpress-service.yaml"]
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"

  # Test: Verify secrets creation
  - name: "gcr.io/cloud-builders/kubectl"
    id: "test-secrets"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        kubectl get secret cloudsql-db-credentials
        kubectl get secret cloudsql-instance-credentials
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"

  # Test: Verify PVC creation
  - name: "gcr.io/cloud-builders/kubectl"
    id: "test-pvc"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        set +e  # Continue on error
        for i in {1..5}; do
          echo "Attempt $i: Checking for PVC wordpress-persistent-storage"
          kubectl get pvc wordpress-persistent-storage
          if [ $? -eq 0 ]; then
            echo "PVC found successfully"
            exit 0
          fi
          echo "PVC not found, waiting 10 seconds before retry"
          sleep 10
        done
        echo "WARNING: PVC wordpress-persistent-storage not found after 5 attempts"
        exit 1
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"

  # Test: Verify WordPress deployment
  - name: "gcr.io/cloud-builders/kubectl"
    id: "test-deployment"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        kubectl rollout status deployment/wordpress --timeout=300s
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"

  # Test: Verify WordPress service and wait for External IP
  - name: "gcr.io/cloud-builders/kubectl"
    id: "test-service-and-wait-for-ip"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        kubectl get service wordpress
        echo "Waiting for external IP (this may take a few minutes)..."
        external_ip=""
        while [ -z $external_ip ]; do
          echo "Waiting for end point..."
          external_ip=$(kubectl get svc wordpress --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}")
          [ -z "$external_ip" ] && sleep 10
        done
        echo "End point ready: $external_ip"
        echo $external_ip > /workspace/external_ip.txt
    env:
      - "CLOUDSDK_COMPUTE_ZONE=us-central1-a"
      - "CLOUDSDK_CONTAINER_CLUSTER=wordpress-cluster"

  # Test: Basic HTTP check
  - name: "gcr.io/cloud-builders/curl"
    id: "test-http"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        if [ ! -f /workspace/external_ip.txt ]; then
          echo "External IP file not found"
          exit 1
        fi
        external_ip=$(cat /workspace/external_ip.txt)
        for i in {1..30}; do
          http_status=$(curl -s -o /dev/null -w "%{http_code}" http://$external_ip)
          if [ $http_status -eq 200 ]; then
            echo "WordPress is responding with HTTP 200"
            exit 0
          fi
          echo "Attempt $i: WordPress is not ready yet. HTTP status: $http_status"
          sleep 10
        done
        echo "WordPress did not become ready in time"
        exit 1

  # Final step to aggregate test results
  - name: "gcr.io/cloud-builders/gcloud"
    id: "aggregate-test-results"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Test Results Summary:"
        echo "---------------------"
        failed_steps=""
        for step in "test-secrets" "test-pvc" "test-deployment" "test-service-and-wait-for-ip" "test-http"; do
          build_step_id=$(gcloud builds describe $BUILD_ID --format='value(steps.id)' | grep $step)
          status=$(gcloud builds describe $BUILD_ID --format='value(steps.status)' | sed -n "${build_step_id}p")
          echo "$step: $status"
          if [ "$status" != "SUCCESS" ]; then
            failed_steps="$failed_steps $step"
          fi
        done
        if [ -n "$failed_steps" ]; then
          echo "WARNING: The following steps failed:$failed_steps"
          echo "Build completed with warnings. Please check the logs for details."
        else
          echo "All tests passed successfully!"
        fi
        # Always exit with 0 to allow the build to complete
        exit 0


  # Clean up the key file
  - name: "gcr.io/cloud-builders/gcloud"
    id: "cleanup"
    entrypoint: "bash"
    args:
      - "-c"
      - "shred -u key.json"

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/wordpress-db-password/versions/latest
      env: "_DB_PASSWORD"

options:
  logging: CLOUD_LOGGING_ONLY

# Uncomment the following line if you need to use a specific service account
# serviceAccount: '424615066975-compute@developer.gserviceaccount.com'